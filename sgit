#!/usr/bin/env bash
#
# sgit - run sed (by default with -i) on one or more globs under git control
#
# This script allows one to run sed on files under git control, based on globs
# (pattern or exact file name) without having to come up with a list of files
# first and then passing those directly to sed.
#
# It allows for multiple sed commands and multiple globs. By default it uses -i
# to edit the file in place (WITHOUT BACKUP EXTENSION; use sgit -i option if you
# want a backup!) but in place editing can be overridden with the -I option. Use
# -h option to see all the options. The README.md provides much more information
# on the usage of the script and I recommend you look at that.
#
# The options are described in more detail in the man page sgit.1.
#
# For a list of warnings see the usage string and more so the README.md file as
# there are some options that when used together (or an option not used with
# another) can in some cases empty files (depends on command) or one can end up
# creating many additional files (if backing up the files for instance with the
# -i option).
#
# A man page also exists for this tool as sgit.1.
#
# This is dedicated to the IOCCC (https://www.ioccc.org), the IOCCC judges
# (https://www.ioccc.org/judges.html), especially Landon Curt Noll
# (http://www.isthe.com/chongo/) for the friendship, telling me stories and
# jokes, telling me history of different things about Unix, C and other things
# and giving me the wonderful opportunity to help so much with the IOCCC -
# prompting me to write this tool - and above all my dear sweet Mum Dianne and
# my wonderful cousin Dani.
#
# - Cody Boone Ferguson (@xexyl)
#

export SGIT_VERSION="1.0.3 06-11-2024" # format: major.minor.patch-release DD-MM-YYYY
SGIT=$(basename "$0")
export SGIT

USAGE="usage: $SGIT [-h] [-V] [-v level] [-x] [-I] [-i extension]
	    [-o sed_option] [-s sed] [-g git] [-X xargs]
	    [-e command] [-n] [-t] [-0] <glob...>

    -h			    print help and exit
    -V			    print version and exit
    -v level		    set verbosity level
    -x			    turn on tracing (set -x)
    -I			    disable in place editing

    -i extension	    set backup extension (default none)
				WARNING: sed -i overwrites existing backup files
				WARNING: this will create or update a file for each file changed

    -o sed_option	    append sed option to options list
				WARNING: use of \"$SGIT -o -n\" without \"$SGIT -I\" can, depending on
				sed commands, empty files as if both 'sed -i' and 'sed -n' were
				used together

				NOTE: you must pass the '-' for short options and '--' for long options!
				NOTE: if you need a space in an option you should quote it!
				NOTE: trying to use this option once to add more than one command can be
				problematic depending on how you do it so it is better to do only one
				command at a time

    -s sed		    set path to sed
    -g git		    set path to git
    -X xargs		    set path to xargs

    -e command		    append sed command to list of commands to execute on globs

    -n			    dry-run: don't run sed, only show files or sed commands with files

				NOTE: if verbosity is > 1 (-v 2)  we show the sed commands along with any sed
				options (if \"$SGIT -o\" used) and the files found; otherwise we only show
				the files found.
				NOTE: use of \"$SGIT -n\" prevents sed commands from being run

    -t			    test sed commands and exit

				NOTE: this does NOT test sed options (\"$SGIT\" -o)

    -0			    Use git ls-files -z and xargs -0

				NOTE: this does not check if your xargs has -0


$SGIT version: $SGIT_VERSION"

# We must make sure we have the tools installed and that they are executable.
# This is important in case the user overrides the paths OR if the any of the
# necessary tools are not installed. We do NOT check if xargs supports -0 as at
# least in some versions (maybe all) of xargs using an invalid option does not
# exit non-zero so there's not a good way to test.


SED="$(type -P sed)"
GIT="$(type -P git)"
XARGS="$(type -P xargs)"
export SED
export GIT
export XARGS
export I_FLAG=
export TEST_SED_COMMANDS=""
export VERBOSITY=0
export EXTENSION=""
export DRY_RUN_OPTION=""
export TRACE_MODE=""
export ZERO_FLAG=


# unset SED_COMMANDS first
unset SED_COMMANDS
# we need an array for sed commands
declare -a SED_COMMANDS
# unset SED_OPTIONS first
unset SED_OPTIONS
# we need an array for sed options
declare -a SED_OPTIONS

# we need to remove ' ' from the IFS!
IFS=$'\t\n'

# parse args
#
while getopts :hVv:xIi:o:s:g:X:e:nt0 flag; do
    case "$flag" in
    h)	echo "$USAGE" 1>&2
	exit 2
	;;
    V)	echo "$SGIT_VERSION" 1>&2
	exit 2
	;;
    v)	VERBOSITY="$OPTARG";
	;;
    x)	TRACE_MODE="-x";
	;;
    I)	I_FLAG="-I"
	;;
    i)  EXTENSION="$OPTARG"
	;;
    o)	SED_OPTIONS+=("$OPTARG")
	;;
    s)	SED="$OPTARG"
	;;
    g)	GIT="$OPTARG"
	;;
    X)	XARGS="$OPTARG"
	;;
    e)	SED_COMMANDS+=("$OPTARG")
	;;
    n)	DRY_RUN_OPTION="-n"
	;;
    t)	TEST_SED_COMMANDS="-t"
	;;
    0)  ZERO_FLAG="-0"
	;;
    \?) echo "$USAGE" 1>&2
	echo 1>&2
	echo "$0: ERROR: invalid option: -$OPTARG" 1>&2
	exit 3
	;;
    :)	echo "$USAGE" 1>&2
	echo 1>&2
	echo "$0: ERROR: option -$OPTARG requires an argument" 1>&2
	echo 1>&2
	exit 3
	;;
    *)  echo "$USAGE" 1>&2
	echo 1>&2
	echo "$0: ERROR: unexpected value from getopts: $flag" 1>&2
	exit 3
	;;
    esac
done

shift $(( OPTIND - 1 ));

# before we do anything check that this is a git repo!
"$GIT" status 2>/dev/null 1>&2
status="$?"
if [[ "$status" -ne 0 ]]; then
    echo "$USAGE" 1>&2
    echo 1>&2
    echo "$(basename "$0"): ERROR: ${PWD} is not a git repository" 1>&2
    exit 1
fi



# if verbosity > 3 we show sed, backup extensions and options
if [[ "$VERBOSITY" -gt 3 ]]; then
    echo "debug[4]: sed: $SED" 1>&2
    echo "debug[4]: backup extension: '$EXTENSION'" 1>&2
    if [[ -n "$I_FLAG" ]]; then
	echo "debug[4]: in-place editing disabled" 1>&2
    else
	echo "debug[4]: in-place editing enabled" 1>&2
    fi
    if [[ -n "$TEST_SED_COMMANDS" ]]; then
	echo "debug[4]: test mode enabled" 1>&2
    else
	echo "debug[4]: test mode disabled" 1>&2
    fi
    if [[ -n "$TRACE_MODE" ]]; then
	echo "debug[4]: trace mode enabled" 1>&2
    else
	echo "debug[4]: trace mode disabled" 1>&2
    fi
fi

# if -x used then turn on tracing
if [[ -n "$TRACE_MODE" ]]; then
    set -x
fi


# firewall

# check that SED_COMMANDS is not empty if not a dry run!
if [[ -z "${SED_COMMANDS[*]}" && -z "$DRY_RUN_OPTION" ]]; then
    echo "$USAGE" 1>&2
    echo 1>&2
    echo "$(basename "$0"): ERROR: you must specify at least one sed command and one glob" 1>&2
    echo 1>&2
    exit 3
fi

# check that sed is an executable file
if [[ -z "$SED" ]]; then
    echo "$USAGE" 1>&2
    echo 1>&2
    echo "$(basename "$0"): ERROR: \$SED cannot be empty" 1>&2
    echo "NOTE: use the -s sed option to specify a sed command" 1>&2
    exit 3
elif [[ ! -f "$SED" ]]; then
    echo "$USAGE" 1>&2
    echo 1>&2
    echo "$(basename "$0"): ERROR: sed is not a regular file: $SED" 1>&2
    echo "NOTE: use the -s sed option to specify a sed command" 1>&2
    exit 3
elif [[ ! -x "$SED" ]]; then
    echo "$USAGE" 1>&2
    echo 1>&2
    echo "$(basename "$0"): ERROR: sed is not an executable file: $SED" 1>&2
    echo "NOTE: use the -s sed option to specify a sed command" 1>&2
    exit 3
fi

# check that git is an executable file
if [[ -z "$GIT" ]]; then
    echo "$USAGE" 1>&2
    echo 1>&2
    echo "$(basename "$0"): ERROR: \$GIT cannot be empty" 1>&2
    echo "NOTE: use the -g git option to specify a git command" 1>&2
    exit 3
elif [[ ! -f "$GIT" ]]; then
    echo "$USAGE" 1>&2
    echo 1>&2
    echo "$(basename "$0"): ERROR: git is not a regular file: $GIT" 1>&2
    echo "NOTE: use the -g git option to specify a git command" 1>&2
    exit 3
elif [[ ! -x "$GIT" ]]; then
    echo "$USAGE" 1>&2
    echo 1>&2
    echo "$(basename "$0"): ERROR: git is not an executable file: $GIT" 1>&2
    echo "NOTE: use the -g git option to specify a git command" 1>&2
    exit 3
fi

# check that xargs is an executable file
if [[ -z "$XARGS" ]]; then
    echo "$USAGE" 1>&2
    echo 1>&2
    echo "$(basename "$0"): ERROR: \$XARGS cannot be empty" 1>&2
    echo "NOTE: use the -X xargs option to specify an xargs command" 1>&2
    exit 3
elif [[ ! -f "$XARGS" ]]; then
    echo "$USAGE" 1>&2
    echo 1>&2
    echo "$(basename "$0"): ERROR: xargs is not a regular file: $XARGS" 1>&2
    echo "NOTE: use the -X xargs option to specify an xargs command" 1>&2
    exit 3
elif [[ ! -x "$XARGS" ]]; then
    echo "$USAGE" 1>&2
    echo 1>&2
    echo "$(basename "$0"): ERROR: xargs is not an executable file: $XARGS" 1>&2
    echo "NOTE: use the -X xargs option to specify an xargs command" 1>&2
    exit 3
fi


# if we are just testing sed commands we can do that now without checking for
# globs as we can run sed on an empty string with the same effect. This is why
# if -t is used we don't need any globs specified
if [[ -n "$TEST_SED_COMMANDS" ]]; then
    STATUS=0
    for cmd in "${SED_COMMANDS[@]}"; do
	if [[ "$VERBOSITY" -ge 1 ]]; then
	    echo -n "testing: 'sed $cmd': " 1>&2
	fi

	echo "" | "$SED" "$cmd" >/dev/null
	if [[ "${PIPESTATUS[1]}" -ne 0 ]]; then
	    STATUS=1
	elif [[ "$VERBOSITY" -ge 1 ]]; then
	    echo "OK" 1>&2
	fi

    done

    exit "$STATUS"
fi

# if we didn't test sed commands we have to check the number of remaining args
if [[ "$#" -eq 0 ]]; then
    echo "$USAGE" 1>&2
    echo 1>&2
    echo "$(basename "$0"): ERROR: you must specify at least one glob" 1>&2
    exit 3
fi

# Depending on verbosity we will show the sed commands and report that we will
# loop through all globs. Later on depending on the verbosity the glob being
# processed will be shown
if [[ "$VERBOSITY" -gt 1 ]]; then
    for cmd in "${SED_COMMANDS[@]}"; do
	echo "debug[2]: sed command: -e \"$cmd\"" 1>&2
    done
    if [[ "$VERBOSITY" -gt 2 ]]; then
	echo "debug[2]: looping through all globs" 1>&2
    fi
fi

# if an extension was provided with -i and verbosity is > 0 we will show the
# extension, even if it's an empty string (the default)
if [[ -n "$EXTENSION" ]]; then
    if [[ "$VERBOSITY" -ge 1 ]]; then
	echo "debug[1]: using backup extension: $EXTENSION" 1>&2
    fi
fi

# we need to get the number of globs
GLOBS="$#"

# the counter to show which glob this is
# NOTE: one of the reasons it is zero based because real programmers start with
# 0
i=0

# as long as we have a glob we have to process it
while [[ "$i" -lt "$GLOBS" ]]; do
    if [[ "$VERBOSITY" -gt 1 ]]; then
	# verbosity > 1: show the glob found on the command line
	echo "debug[2]: found glob: $i" 1>&2
    fi

    # we first need to check if this glob will find any files.
    GLOB=""
    if [[ -n "$ZERO_FLAG" ]]; then
	GLOB="$($GIT ls-files -z "$1")"
    else
	GLOB="$($GIT ls-files "$1")"
    fi

    if [[ -z "$GLOB" ]]; then
	if [[ "$VERBOSITY" -gt 1 ]]; then
	    # if we are reporting the globs found then we have to tell the user
	    # that no files were found so we're skipping over it
	    echo "debug[2]: no files found with glob: \"$1\"" 1>&2
	    echo "debug[2]: hint: do you need to use -0?" 1>&2
	fi
    else
	# if verbosity > 1 && -n not used:
	if [[ "$VERBOSITY" -ge 1 && -z "$DRY_RUN_OPTION" ]]; then
	    # If in-in place editing in use (i.e. -I not used = the default), we
	    # have to show what would be run at this point, specifying the extension
	    # (by default empty but can be modified with the sgit -i option).
	    if [[ -z "$I_FLAG" ]]; then
		#
		# first we determine if any sed options were specified.
		#
		# We only need to know if the array is empty or not; we do not need
		# to expand it in the check so we disable this ShellCheck warning:
		#
		#	SC2128 (warning): Expanding an array without an index only gives the first element.
		#
		# shellcheck disable=SC2128

		# if sed options were specified (sgit -o was used) we need to show
		# the options along with the commands to be run on the files found.
		if [[ -n "$SED_OPTIONS" ]]; then
                    if [[ -z "$ZERO_FLAG" ]]; then
                        while read -r f; do
                            for cmd in "${SED_COMMANDS[@]}"; do
                                if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                                    echo "debug[1]: about to run: $SED -i\"$EXTENSION\" ${SED_OPTIONS[*]} -e \"$cmd\"" "$f" 1>&2
                                fi
                            done
                        done < <("$GIT" ls-files "$1")
                    else
                         while read -r f; do
                            for cmd in "${SED_COMMANDS[@]}"; do
                                echo "debug[1]: about to run: $SED -i\"$EXTENSION\" ${SED_OPTIONS[*]} -e \"$cmd\"" "$f" 1>&2
                            done
                        done < <("$GIT" ls-files -z "$1")
                    fi

		# if, however, sed options were not used (sgit -o NOT used) we only show the
		# sed commands to be run on the files found.
		else
		    for cmd in "${SED_COMMANDS[@]}"; do
                        if [[ -z "$ZERO_FLAG" ]]; then
                            while read -r f; do
                                if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                                    echo "debug[1]: about to run: $SED -i\"$EXTENSION\" -e \"$cmd\"" "$f" 1>&2
                                fi
                            done < <("$GIT" ls-files "$1")
                        else
                            while read -r f; do
                                if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                                    echo "debug[1]: about to run: $SED -i\"$EXTENSION\" -e \"$cmd\"" "$f" 1>&2
                                fi
                            done < <("$GIT" ls-files -z "$1")
                        fi
		    done
		fi
	    # otherwise, if we're not to do in place editing (i.e. sgit -I used),
	    # show that sgit will NOT use sed with in-place editing mode (i.e. sed
	    # -i will NOT be used)
	    else
		# if sed options specified (sgit -o) we show the sed command with
		# options run on any files found.
		if [[ -n "$SED_OPTIONS" ]]; then
                    if [[ -z "$ZERO_FLAG" ]]; then
                        while read -r f; do
                            for cmd in "${SED_COMMANDS[@]}"; do
                                if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                                    echo "debug[1]: about to run: $SED ${SED_OPTIONS[*]} -e \"$cmd\"" "$f" 1>&2
                                fi
                            done
                        done < <("$GIT" ls-files "$1")
                    else
                        while read -r f; do
                            for cmd in "${SED_COMMANDS[@]}"; do
                                if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                                    echo "debug[1]: about to run: $SED ${SED_OPTIONS[*]} -e \"$cmd\"" "$f" 1>&2
                                fi
                            done
                        done < <("$GIT" ls-files -z "$1")
                    fi
		# otherwise, if sed options not specified (sgit -o NOT used), we have to show
		# just the sed command on the files found.
		else
		    for cmd in "${SED_COMMANDS[@]}"; do
                        if [[ -z "$ZERO_FLAG" ]]; then
                            while read -r f; do
                                if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                                    echo "debug[1]: about to run: $SED -e \"$cmd\"" "$f" 1>&2
                                fi
                            done < <("$GIT" ls-files "$1")
                        else
                            while read -r f; do
                                if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                                    echo "debug[1]: about to run: $SED -e \"$cmd\"" "$f" 1>&2
                                fi
                            done < <("$GIT" ls-files -z"$1")
                        fi
		    done
		fi
	    fi
	fi

	# now if dry run (sgit -n) was used we DON'T run sed but just print out what
	# files would be acted on OR, if verbosity level is high enough (> 0), we
	# print the COMMAND AND THE FILE NAME, one file at a time
	if [[ -n "$DRY_RUN_OPTION" ]]; then
	    # if we have sed options (sgit -o) then we print either
	    # just the files or the command AND files with the sed options assuming
	    # verbosity > 0. Of course if verbosity is NOT > 0 then it's kind of
	    # pointless to check the sed options being specified but we do it to be
	    # complete
	    if [[ -n "$SED_OPTIONS" ]]; then
		# sgit -o used: we have sed options
                if [[ -z "$ZERO_FLAG" ]]; then
                    while read -r f; do
                        if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                            if [[ "$VERBOSITY" -ge 1 && -n "${SED_COMMANDS[*]}" ]]; then
                                # verbosity is high enough: we have sed options so show the
                                # full sed command
                                for cmd in "${SED_COMMANDS[@]}"; do
                                    echo "debug[1]: $SED" -i"$EXTENSION" "${SED_OPTIONS[*]}" -e \""$cmd"\" \""$f"\" 1>&2
                                done
                            else
                                # here verbosity is not high enough (< 1) so we just show
                                # the files that sed would run on without the -n option
                                echo "$f" 1>&2
                            fi
                        fi
                    done < <("$GIT" ls-files "$1")
                else
                    while read -r f; do
                        if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                            if [[ "$VERBOSITY" -ge 1 && -n "${SED_COMMANDS[*]}" ]]; then
                                # verbosity is high enough: we have sed options so show the
                                # full sed command
                                for cmd in "${SED_COMMANDS[@]}"; do
                                    echo "debug[1]: $SED" -i"$EXTENSION" "${SED_OPTIONS[*]}" -e \""$cmd"\" \""$f"\" 1>&2
                                done
                            else
                                # here verbosity is not high enough (< 1) so we just show
                                # the files that sed would run on without the -n option
                                echo "$f" 1>&2
                            fi
                        fi
                    done < <("$GIT" ls-files -z "$1")
                fi


	    # otherwise, if we reach this else, we know that there are no sed options
	    # so we show either sed commands in full (with file) or just the files,
	    # depending on the verbosity
	    else
		# for each file found with the current glob...
                if [[ -z "$ZERO_FLAG" ]]; then
                    while read -r f; do
                        if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                            if [[ "$VERBOSITY" -ge 1 && -n "${SED_COMMANDS[*]}" ]]; then
                                # verbosity is high enough so we show the sed commands with
                                # the files found for this glob
                                for cmd in "${SED_COMMANDS[@]}"; do
                                    echo "$SED" -i"$EXTENSION" -e \""$cmd"\" \""$f"\" 1>&2
                                done
                            else
                                # here we just show the files that would be acted on
                                echo "$f" 1>&2
                            fi
                        fi
                    done < <("$GIT" ls-files "$1")
                else
                    while read -r f; do
                        if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                            if [[ "$VERBOSITY" -ge 1 && -n "${SED_COMMANDS[*]}" ]]; then
                                # verbosity is high enough so we show the sed commands with
                                # the files found for this glob
                                for cmd in "${SED_COMMANDS[@]}"; do
                                    echo "$SED" -i"$EXTENSION" -e \""$cmd"\" \""$f"\" 1>&2
                                done
                            else
                                # here we just show the files that would be acted on
                                echo "$f" 1>&2
                            fi
                        fi
                    done < <("$GIT" ls-files -z "$1")
                fi
	    fi
	# here we can actually run commands!
	elif [[ -z "$I_FLAG" ]]; then
	    # no -I flag so we do an in-place edit (which was the initial purpose of
	    # this script)
	    if [[ -n "$SED_OPTIONS" ]]; then
		# we have sed options (sgit -o) so we have to run sed with the
		# options specified, on the files found

		# check if -0 used
                if [[ -z "$ZERO_FLAG" ]]; then
                    while read -r f; do
                        if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                            for cmd in "${SED_COMMANDS[@]}"; do
                                "$SED" -i"$EXTENSION" "${SED_OPTIONS[*]}" -e "$cmd" "$f"
                            done
                        fi
                    done < <("$GIT" ls-files "$1")
		else
                    while read -r f; do
                        if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                            for cmd in "${SED_COMMANDS[@]}"; do
                                "$SED" -i"$EXTENSION" "${SED_OPTIONS[*]}" -e "$cmd" "$f"
                            done
                        fi
                    done < <("$GIT" ls-files -z "$1")
		fi
	    else
		# we don't have any sed options (sgit -o NOT used) so just run the sed
		# commands with the extension (default empty)

		# check if -0 used
		if [[ -z "$ZERO_FLAG" ]]; then
                    while read -r f; do
                        if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                            for cmd in "${SED_COMMANDS[@]}"; do
                                "$SED" -i"$EXTENSION" -e "$cmd" "$f"
                            done
                        fi
                    done < <("$GIT" ls-files "$1")
		else
                    while read -r f; do
                        if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                            for cmd in "${SED_COMMANDS[@]}"; do
                                "$SED" -i"$EXTENSION" -e "$cmd" "$f"
                            done
                        fi
                    done < <("$GIT" ls-files -z "$1")
		fi
	    fi
	else
	    # -I specified: we do NOT want to do an in-place edit here but we do
	    # still have to check for sed options (sgit -o)
	    if [[ -n "$SED_OPTIONS" ]]; then
		# sed options (sgit -o) were specified so run sed on the files with
		# the sed options

		# check for -0
                if [[ -z "$ZERO_FLAG" ]]; then
                    while read -r f; do
                        if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                            for cmd in "${SED_COMMANDS[@]}"; do
                                "$SED" "${SED_OPTIONS[*]}" -e "$cmd" "$f"
                            done
                        fi
                    done < <("$GIT" ls-files "$1")
		else
                    while read -r f; do
                        if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                            for cmd in "${SED_COMMANDS[@]}"; do
                                "$SED" "${SED_OPTIONS[*]}" -e "$cmd" "$f"
                            done
                        fi
                    done < <("$GIT" ls-files -z "$1")
		fi
	    else
		# as no sgit -o was used we just run the sed commands on the files

		# check for -0
		if [[ -z "$ZERO_FLAG" ]]; then
                    while read -r f; do
                        if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                            for cmd in "${SED_COMMANDS[@]}"; do
                                "$SED" -e "$cmd" "$f"
                            done
                        fi
                    done < <("$GIT" ls-files "$1")
		else
                    while read -r f; do
                        if [[ -f "$f" ]] && [[ ! -L "$f" ]]; then
                            for cmd in "${SED_COMMANDS[@]}"; do
                                "$SED" -e "$cmd" "$f"
                            done
                        fi
                    done < <("$GIT" ls-files -z "$1")
		fi
	    fi
	fi
    fi

    # this here makes us go to the next glob, if there is one
    ((i++))
    shift 1

    # if verbosity > 2 and there are globs left we will print how many remain
    if [[ "$VERBOSITY" -gt 2 ]]; then
	if [[ "$#" -eq 1 ]]; then
	    echo "debug[2]: $# remaining glob" 1>&2
	else
	    echo "debug[2]: $# remaining globs" 1>&2
	fi
    fi
done

# And...that's all folks!

exit 0
